[
  {
    "objectID": "terminology/rhyme_stem.html",
    "href": "terminology/rhyme_stem.html",
    "title": "rhyme stem",
    "section": "",
    "text": "A rhyme stem is the portion of the word or phrase that is relevant for rhyme evaluation/judgement.\nThe short rhyme stem of a word is the final vowel of the word plus any and all consonants afterwards.\nThe long rhyme stem of a word is the sequence starting at the main stress of the word and continuing until the end.\nTo date, all rhymes are judged based off the short rhyme stem.",
    "crumbs": [
      "Home",
      "Terminology",
      "rhyme stem"
    ]
  },
  {
    "objectID": "guides/rhyme-distances.html",
    "href": "guides/rhyme-distances.html",
    "title": "Working with rhyme distances",
    "section": "",
    "text": "Code\n## code preamble\n\nfrom rhyme_functions import *\n# import pygraphviz as pgv\nfrom pyeditdistance import distance as d\nimport pandas as pd\nimport graphviz\nfrom IPython.display import Image",
    "crumbs": [
      "Home",
      "Guides",
      "Working with rhyme distances"
    ]
  },
  {
    "objectID": "guides/rhyme-distances.html#introduction",
    "href": "guides/rhyme-distances.html#introduction",
    "title": "Working with rhyme distances",
    "section": "Introduction",
    "text": "Introduction\nRhyme scheme information is presented in the tagged linegroup data in a variety of ways. One column contains the standard AABB-style rhyme schemes (henceforth ‘AB-scheme’), and another contains the rhyme_distances (hereafter ‘distance scheme’). In most situations where you will be searching, filtering, and comparing rhyme schemes, especially with the use of code, the rhyme distances will provide more flexibility and generality.\n\nTypes of schemes\n\nAB-schemes\nTo construct an AB-scheme generally, start at the last word of the first line of the stanza. Label this line ‘A’. Any subsequent line that rhymes (meaning, the last word of that line rhymes with the last word of the current line), label those lines ‘A’. Move to the next unlabeled line, and continue labeling with ‘B’, and so on, until all lines are labeled.\n\n\n\n\n\n\n\n\nregularized text\nfinal word\nAB-scheme\n\n\n\n\nLO I the man, whose Muse whilom did mask,\nmask\nA\n\n\nAs time her taught, in lowly shepherds weeds,\nweeds\nB\n\n\nAm now enforced a far unfitter task,\ntask\nA\n\n\nFor trumpets stern to change mine Oaten reeds:\nreeds\nB\n\n\nAnd sing of Knights and Ladies gentle deeds,\ndeeds\nB\n\n\nWhose praises having slept in silence long,\nlong\nC\n\n\nMe, all too mean, the sacred Muse areeds\nareeds\nB\n\n\nTo blazon broad amongst her learned throng:\nthrong\nC\n\n\nFierce wars and faithful loves shall moralise my song.\nsong\nC\n\n\n\n\n\nDistance schemes\nTo construct a distance scheme, start at the first line of the stanza. Find the next line that rhymes, and count the distance away in lines (so that the next line is 1, then 2, etc) of the next line that rhymes. Label the current line with this distance. If no subsequent line rhymes, label the current line 0. (In the implementation here, this lookahead is only done up to some window size, in our case 4; so no distances will be found that are greater than 4.) Continue until all lines are labeled.\n\n\n\n\n\n\n\n\n\nregularized text\nfinal word\nscheme\ndistance\n\n\n\n\nLO I the man, whose Muse whilom did mask,\nmask\nA\n2\n\n\nAs time her taught, in lowly shepherds weeds,\nweeds\nB\n2\n\n\nAm now enforced a far unfitter task,\ntask\nA\n0\n\n\nFor trumpets stern to change mine Oaten reeds:\nreeds\nB\n1\n\n\nAnd sing of Knights and Ladies gentle deeds,\ndeeds\nB\n2\n\n\nWhose praises having slept in silence long,\nlong\nC\n2\n\n\nMe, all too mean, the sacred Muse areeds\nareeds\nB\n0\n\n\nTo blazon broad amongst her learned throng:\nthrong\nC\n1\n\n\nFierce wars and faithful loves shall moralise my song.\nsong\nC\n0\n\n\n\nBoth schemes largely overlap in what information they convey (though they are not truly equivalent); in fact, the code that searches the corpus calculates the distance scheme directly, and the AB-scheme is later deduced from this. The distance scheme more transparently encodes the rhyme information as a graph, where each line is a node and the edges (connections) are intended rhymes. Implicit in both of these schemes are the line numbers themselves; this is reflected in the order of the labels. The table below makes these explicit, and for brevity removes the words themselves so now only the line and rhyme information remains.\n\n\n\nline\nscheme\ndistance\n\n\n\n\n1\nA\n2\n\n\n2\nB\n2\n\n\n3\nA\n0\n\n\n4\nB\n1\n\n\n5\nB\n2\n\n\n6\nC\n2\n\n\n7\nB\n0\n\n\n8\nC\n1\n\n\n9\nC\n0\n\n\n\nThe table can now be read as follows: line 1 has its closest rhyme 2 lines away, line 2 has its closest rhyme 2 lines away, line 3 does not have any subsequent rhymes, and so on. Or after some arithmetic, line 1 rhymes with line 3 (current line 2 + distance 1), line 2 rhymes with line 4 (2+2), and so on.",
    "crumbs": [
      "Home",
      "Guides",
      "Working with rhyme distances"
    ]
  },
  {
    "objectID": "guides/rhyme-distances.html#rhyme-as-a-relation",
    "href": "guides/rhyme-distances.html#rhyme-as-a-relation",
    "title": "Working with rhyme distances",
    "section": "Rhyme as a relation",
    "text": "Rhyme as a relation\nA relation \\(R\\) between elements of some set \\(S\\) is a subset of \\(S \\times S\\). In modeling the relation of rhyming, the set \\(S\\) consists of words, and a pair of words are in \\(R\\) if and only if they rhyme. Uncontroversally, (bat,cat) is in \\(R\\), but (bat,love) is not. But the intensional definition of the rhyme relationship remains to be defined.\n\nPerfect rhyme\nLet’s first define an idealized notion of perfect rhyme. Intuitively, these are words that have identical rhyme stems . Assume the rhyme stem so far is just the final sequence in the word consisting of the final vowel plus any following consonants. Let the relation of perfect rhyme \\(R_P\\) be such that if two words have identical rhyme stems, they perfectly rhyme. Bat perfectly rhymes with cat is shorthand for (bat,love) \\(\\in R_P\\). The relation \\(R_P\\) is therefore an equivalence relation:\n\n\\(R_P\\) is transitive: if A perfectly rhymes with B, and B perfectly rhymes with C, then A perfectly rhymes with C.\n\\(R_P\\) is reflexive: for all words A, A perfectly rhymes with A.\n\\(R_P\\) is symmetric: if A perfectly rhymes with B, then B perfectly rhymes with A.\n\n\n\nImperfect rhyme\nIn actuality, rhymes are not all perfect. Let’s call relation of imperfect rhyme \\(R_I\\). This relation is meant to reflect the set of word pairs actually found in rhyming position (or inferred to be in rhyming position) in the corpus. Intuitively, it should still be reflexive (words still rhyme with themselves) and symmetric (if A rhymes with B, then B rhymes with A), though the notion of transitivity is less clear. (Do there actually exist situations where A is judged to rhyme with B, and B is judged to rhyme with C, but A is not judged to rhyme with C?) Thus \\(R_I\\) will not be treated as an equivalence relation a priori and instead the properties of it as a relationship will themselves be objects of study.\nAs the rhyme dictionary is not perfect, the actual set of pairs of words that are marked as rhyming will be an arbitrary collection (or at least, might trend towards an equivalence relation but will not categorically be one). For example, if a stanza is encountered that ends in the words “thee”, “be”, and “see”, and only the pairs (“thee”,“see”) and (“be”,“see”) are present in the rhyming dictionary, then a connected set of rhyming words will be found, but with a loss of transitivity (since (“thee”,“be”) is not found).\nImplicit in the AB-scheme representation is that each rhyme group (or letter) is treated as an equivalence relationship: given a three-line stanza schemed AAAA, then it is (usually) safe to assume that line 1 rhymes with lines 2, 3, and 4; line 2 rhymes with 1, 3, 4; line 3 rhymes with 1, 2, and 4, and line 4 rhymes with 1, 2, and 3. Essentially, take any two rhyming words from this stanza, and they should rhyme.\nWhat the distances schemes show instead is show the pair-level information about what specific rhyme pairs exist in the stanza, at the behest of clearly showing the overall groups of words that rhyme. For example, in a hypothetical stanza with an AB-scheme of AAA, there are two consistent distance schemes:\n\n110\n210\n\n110 states that line 1 rhymes with line 2 (its next rhyme is a distance of 1 away), and that line 2 rhymes with line 3 (its next rhyme is also a distance of 1 away). This is what you would expect to find assuming a perfect rhyme relation with a dictionary to match. The distance scheme 210, however, says explicitly that line 1 rhymes with line 3 (being a distance of 2 away), and that line 2 also rhymes with line 3 (being a distance of 1 away). This still results in a connected subset of pairs you would expect to find in a perfect AAA representation of the stanza, but with the loss of transitivity regarding lines 1 and 2. It could be the case that the word pair from lines 1 and 2 is simply a gap in the dictionary (in which case it can be inferred), or it could be an accidental rhyme (maybe line 2 is not meant to rhyme with line 3 but the pair is erroneously in the rhyming dictionary). Such is a question for further investigation, but the crucial point here is that the distance scheme gives us a hint that something is not quite as expected.",
    "crumbs": [
      "Home",
      "Guides",
      "Working with rhyme distances"
    ]
  },
  {
    "objectID": "guides/rhyme-distances.html#schemes-as-graphs",
    "href": "guides/rhyme-distances.html#schemes-as-graphs",
    "title": "Working with rhyme distances",
    "section": "Schemes as graphs",
    "text": "Schemes as graphs\nA graph, in purely mathematical terms, is simply a pair of two sets: an edge set and a vertex (or node) set. Edges are connections between vertices (or nodes). For our purposes, the edge set of a rhyme graph will be the rhyming relation, and nodes are lines of poetry. A connection, then, between a node labeled “1” and a node labeled “3” indicates that lines 1 and 3 rhyme. Each type of rhyme scheme essentially encodes this information, so graphs will be used to both show the rhymes schemes visually but also to take advantage of the mathematical properties of graphs when working with rhyme schemes directly.\nThe connections from the previous table are shown as an explicit graph below; the positions of the nodes are arbitrary; the only information encoded is that which is explicitly shown (i.e. the edges and the nodes).\n\n\n\n\n\n\n\nG\n\nrhyme graph showing next closest rhyme for each line\n\n\n1\n\n1\n\n\n\n3\n\n3\n\n\n\n1--3\n\n\n\n\n2\n\n2\n\n\n\n4\n\n4\n\n\n\n2--4\n\n\n\n\n5\n\n5\n\n\n\n4--5\n\n\n\n\n7\n\n7\n\n\n\n5--7\n\n\n\n\n6\n\n6\n\n\n\n8\n\n8\n\n\n\n6--8\n\n\n\n\n9\n\n9\n\n\n\n8--9\n\n\n\n\n\n\n\n\n\nThis graph has three separate, connected parts (or components). Each connected component represents a group of words that rhyme: the 1-3 component is the “A” group in terms of the AB-scheme, the 2-4-5-7 component the “B” group, and the 6-8-9 component the “C” group. Note that because this graph representation came directly from the distance scheme, we can annotate the graph with the words and rhyme groups from the original stanza for clarity.\n\n\n\n\n\n\n\nG\n\nrhyme graph annotated with line-final words and AB-scheme groups\n\ncluster_a\n\n\n\ncluster_b\n\n\n\ncluster_c\n\n\n\n\n1\n\n1 mask\n\n\n\n3\n\n3 task\n\n\n\n1--3\n\n A\n\n\n\n2\n\n2 weeds\n\n\n\n4\n\n4 reeds\n\n\n\n2--4\n\n B\n\n\n\n5\n\n5 deeds\n\n\n\n4--5\n\n B\n\n\n\n7\n\n7 areeds\n\n\n\n5--7\n\n B\n\n\n\n6\n\n6 long\n\n\n\n8\n\n8 throng\n\n\n\n6--8\n\n C\n\n\n\n9\n\n9 song\n\n\n\n8--9\n\n C\n\n\n\n\n\n\n\n\nThe rhyme graph now clearly shows six different connections between nodes, or rather 6 calculated rhymes. The previous two graphs encode the same type of rhyme scheme, the only difference is how they are visually presented.\nSome things to note at this point: the rhyme search procedure of the corpus looks for only the next closest rhyme before moving on, thus if an intended scheme is AAA, then lines 1 and 2 are connected, as well as 2 and 3, but the connection between 1 and 3 is not explicitly shown. These can be added for any graph by calculating the transitive closure of that graph, but since we are building our graphs based on the results of the code directly they are not shown in the above examples. In other words, the graphs built from the distance schemes directly are the transitive reduction of the intended rhyming relation.",
    "crumbs": [
      "Home",
      "Guides",
      "Working with rhyme distances"
    ]
  },
  {
    "objectID": "guides/rhyme-distances.html#oneoffs-and-rhyme-scheme-comparisons",
    "href": "guides/rhyme-distances.html#oneoffs-and-rhyme-scheme-comparisons",
    "title": "Working with rhyme distances",
    "section": "Oneoffs and rhyme scheme comparisons",
    "text": "Oneoffs and rhyme scheme comparisons\nThe rhyme search procedure is not perfect. There are both false negatives–intended rhyme pairs that the search missed–and false positives–words tagged as a rhyme that are not intended to rhyme. Among other things, this means that if there is a target scheme in mind, such as Rhyme Royal (ABABBCC), there are a number of considerations to take when searching for this exact scheme and tagged schemes that are close to this scheme.\nThe general focus of this section is to answer the question: given two schemes, how can we quantify how similar/different they are?\n\nString edit distance\nString edit distance is a measure of how different two strings (linear sequences of symbols) are, by measuring additions, removals, and substitutions between them. For example, bat and cat have an edit distance of 1 (1 substitution), while bat and cats have a distance of 2 (1 substitution and 1 addition).\nAs both an AB-scheme and a distance scheme can be represented as simply a string of characters: say, ABABBCBCC and 220122010, it is tempting to compare scheme similarity with edit distance; however, edit distance should only be used with distance schemes.\nConsider a starting distance scheme of 220122010 (ABABBCBCC in AB-scheme terms). There are exactly six oneoffs of these scheme. A oneoff is a scheme that is identical to the original but with one fewer rhyme pair. These are all enumerated in the table below. Each row shows the resulting distance scheme, and the pair of line numbers that is missing from the oneoff but present in the target scheme.\n\n\nCode\ntarget_distance = [int(x) for x in '220122010']\noneoffs = get_oneoffs(target_distance)\noneoff_dict = defaultdict(list)\nfor oo, dist in oneoffs.items():\n    ab_scheme = distances_to_ab(dist)\n    dist_str = ''.join([str(d) for d in dist])\n    oneoff_dict['ab_scheme'].append(ab_scheme)\n    oneoff_dict['dist_str'].append(dist_str)\n    oneoff_dict['pair_removed'].append(oo)\n    oneoff_dict['distances'].append(dist)\n\ndf = pd.DataFrame(oneoff_dict)\ndf['target_ab'] = distances_to_ab(target_distance)\ndf['target_dist'] = ''.join([str(d) for d in target_distance])\n\ndf['ab_edit_distance'] = df.apply(lambda x: d.levenshtein(x['ab_scheme'], x['target_ab']),axis=1)\ndf['dist_edit_distance'] = df.apply(lambda x: d.levenshtein(x['dist_str'], x['target_dist']),axis=1)\n\nkeep = \"ab_scheme dist_str pair_removed ab_edit_distance dist_edit_distance\".split()\n\ndf[keep]\n\n\n\n\n\n\n\n\n\n\n\n\nab_scheme\ndist_str\npair_removed\nab_edit_distance\ndist_edit_distance\n\n\n\n\n0\nABCBBDBDD\n020122010\n(1, 3)\n4\n1\n\n\n1\nABACCDCDD\n200122010\n(2, 4)\n5\n1\n\n\n2\nABABCDCDD\n220022010\n(4, 5)\n4\n1\n\n\n3\nABABBCDCC\n220102010\n(5, 7)\n1\n1\n\n\n4\nABABBCBDD\n220120010\n(6, 8)\n2\n1\n\n\n5\nABABBCBCD\n220122000\n(8, 9)\n1\n1\n\n\n\n\n\n\n\n\nFigure 1: Comparing the oneoffs of 220122010\n\n\n\n\nThe ab_edit_distance column simply takes the AB-schemes as strings and calculates the string edit distance between them. Note that in general, the earlier in the stanza the rhyme difference is, the higher this edit distance is likely to be, since an early change in how a line is labeled will propagate down to the rest of the linegroup. This is not a recommended way to compare line schemes.\nHowever, taking the distance schemes as strings, and comparing those with string edit distance, gives a reliable count of the differences between the two schemes in question. Every oneoff has a count of 1 in the dist_edit_distance column, as in this representation, if two strings are identical except for a single rhyme, they will differ in only the position of the first word in that rhyme pair.\n\n\n\nName\nDistance Scheme\nAB-scheme\n\n\n\n\nTarget scheme\n220122010\nABABBCBCC\n\n\nExample oneoff\n020122010\nABCBBDBDD\n\n\nEdit distance\n1\n4\n\n\n\n(in progress)",
    "crumbs": [
      "Home",
      "Guides",
      "Working with rhyme distances"
    ]
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Investigating rhymes in the Early Print corpus",
    "section": "",
    "text": "This website is in progress and meant for EarlyPrint-internal use at the moment.\nThe EarlyPrint corpus: https://earlyprint.org/\nMany a little makes a mickle."
  }
]